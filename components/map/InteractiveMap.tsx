'use client';
import { useEffect, useMemo, useRef, useState } from 'react';
export type Pin={ id:string; lat:number; lng:number; title:string; price:string; meta:string };
function project(lng:number, lat:number, width:number, height:number, center:{lng:number;lat:number}, zoom:number){ const lambda=(lng*Math.PI)/180, phi=(lat*Math.PI)/180; const x=(lambda+Math.PI)/(2*Math.PI); const y=(1-Math.log(Math.tan(phi)+1/Math.cos(phi))/Math.PI)/2; const scale=256*Math.pow(2,zoom); const cLam=(center.lng*Math.PI)/180, cPhi=(center.lat*Math.PI)/180; const cx=(cLam+Math.PI)/(2*Math.PI); const cy=(1-Math.log(Math.tan(cPhi)+1/Math.cos(cPhi))/Math.PI)/2; const px=(x-cx)*scale+width/2; const py=(y-cy)*scale+height/2; return {x:px,y:py}; }
function clusterPoints(points:{x:number;y:number;id:string}[], radius=44){ const out:any[]=[]; const used=new Set<string>(); for(let i=0;i<points.length;i++){ const p=points[i]; if(used.has(p.id)) continue; const bucket=[p]; used.add(p.id); for(let j=i+1;j<points.length;j++){ const q=points[j]; if(used.has(q.id)) continue; const d=Math.hypot(p.x-q.x,p.y-q.y); if(d<=radius){used.add(q.id); bucket.push(q);} } if(bucket.length===1) out.push(p); else { const cx=bucket.reduce((a,b)=>a+b.x,0)/bucket.length; const cy=bucket.reduce((a,b)=>a+b.y,0)/bucket.length; out.push({x:cx,y:cy,ids:bucket.map(b=>b.id)}); } } return out; }
export default function InteractiveMap({ pins }:{ pins: Pin[] }){ const ref=useRef<HTMLDivElement>(null); const [size,setSize]=useState({w:800,h:600}); const [zoom,setZoom]=useState(10); const [center,setCenter]=useState<{lng:number;lat:number}>({ lng:31.2357, lat:30.0444 }); const [hoverId,setHoverId]=useState<string|null>(null); const usingMapbox=!!process.env.NEXT_PUBLIC_MAPBOX_TOKEN; useEffect(()=>{ const el=ref.current; if(!el) return; const ro=new ResizeObserver(e=>{ const r=e[0].contentRect; setSize({w:r.width,h:r.height}); }); ro.observe(el); return ()=>ro.disconnect(); },[]); useEffect(()=>{ if(!pins?.length) return; const lng=pins.reduce((a,p)=>a+p.lng,0)/pins.length; const lat=pins.reduce((a,p)=>a+p.lat,0)/pins.length; setCenter({lng,lat}); },[pins]); const projected=useMemo(()=> (pins||[]).map(p=>({ id:p.id, ...project(p.lng,p.lat,size.w,size.h,center,zoom), payload:p })),[pins,size,center,zoom]); const clusters=useMemo(()=>clusterPoints(projected as any,44),[projected]); const hovered=useMemo(()=> pins?.find(p=>p.id===hoverId) || null, [pins,hoverId]); const hoveredXY=useMemo(()=> projected.find(p=>p.id===hoverId) || null, [projected,hoverId]); return (<div ref={ref} className="relative w-full h-full overflow-hidden">
  {!usingMapbox && (<div className="absolute inset-0" style={{ backgroundImage: "url(/dummy-map.jpg)", backgroundSize: "cover" }} />)}
  {!usingMapbox && clusters.map((c:any)=>{ const isCluster=!!c.ids; if(isCluster) return (<button key={`cluster-${c.ids[0]}`} className="absolute z-10 -translate-x-1/2 -translate-y-1/2 rounded-full border border-amber-300 bg-white/90 px-2 py-1 text-xs" style={{left:c.x, top:c.y}} onClick={()=>setZoom(z=>Math.min(18,z+1))} aria-label={`Cluster of ${c.ids.length} pins`}>{c.ids.length}</button>); return (<div key={c.id} className="absolute z-10 -translate-x-1/2 -translate-y-1/2" style={{left:c.x, top:c.y}} onMouseEnter={()=>setHoverId(c.id)} onMouseLeave={()=>setHoverId(id=>id===c.id?null:id)} role="button"><div className="h-3 w-3 rounded-full bg-red-600 shadow-[0_0_0_4px_rgba(255,0,0,0.2)]" /></div>); })}
  {!usingMapbox && hovered && hoveredXY && (<div className="pointer-events-none absolute -translate-x-1/2 -translate-y-full rounded-xl border border-amber-200 bg-white p-3 shadow-lg" style={{ left: hoveredXY.x, top: hoveredXY.y - 12 }}><div className="text-sm font-semibold">{hovered.title}</div><div className="text-xs text-neutral-600">{hovered.meta}</div><div className="mt-1 text-sm font-bold text-amber-500">{hovered.price}</div></div>)}
  {!usingMapbox && (<><div className="absolute z-10 space-y-2 right-3 top-3"><button aria-label="Zoom in" className="rounded-md border border-amber-200 bg-white px-2 py-1" onClick={()=>setZoom(z=>Math.min(18,z+1))}>+</button><button aria-label="Zoom out" className="rounded-md border border-amber-200 bg-white px-2 py-1" onClick={()=>setZoom(z=>Math.max(2,z-1))}>-</button></div><div className="absolute left-3 top-3 z-10"><input type="range" min={2} max={18} value={zoom} onChange={(e)=>setZoom(parseInt(e.target.value))} aria-label="Zoom" /></div></>)}
</div>); }
