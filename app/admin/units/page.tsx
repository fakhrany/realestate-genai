'use client';
import { useEffect, useState } from 'react'; import AdminShell from '@/components/admin/AdminShell'; import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { z } from 'zod'; import { useForm } from 'react-hook-form'; import { zodResolver } from '@hookform/resolvers/zod';
const UnitSchema=z.object({ projectId:z.string().min(1), type:z.enum(['apartment','villa','th','twin']), bedrooms:z.coerce.number().int().min(0), bathrooms:z.coerce.number().int().optional(), sizeSqm:z.coerce.number().int().min(0), priceEgp:z.coerce.number().int().optional(), priceUsd:z.coerce.number().int().optional(), currency:z.string().default('EGP').optional(), availability:z.enum(['available','reserved','sold']).default('available').optional() }); type Project={ id:string; name:string }; type Unit=z.infer<typeof UnitSchema>&{ id?:string };
export default function Page(){ const [items,setItems]=useState<any[]>([]); const [projects,setProjects]=useState<Project[]>([]); const form=useForm<Unit>({ resolver:zodResolver(UnitSchema), defaultValues:{ type:'apartment', bedrooms:2, sizeSqm:100, availability:'available' } });
  async function load(){ const [u,p]=await Promise.all([fetch('/api/units').then(r=>r.json()), fetch('/api/projects').then(r=>r.json())]); setItems(u); setProjects(p); } useEffect(()=>{ load(); },[]);
  async function onSubmit(values:Unit){ await fetch('/api/units',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(values)}); form.reset({ type:'apartment', bedrooms:2, sizeSqm:100, availability:'available' } as any); await load(); }
  async function remove(id:string){ await fetch(`/api/units/${id}`,{ method:'DELETE' }); await load(); }
  return (<AdminShell><div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    <Card><CardHeader><CardTitle>Add Unit</CardTitle></CardHeader><CardContent className="space-y-3"><form onSubmit={form.handleSubmit(onSubmit)} className="grid grid-cols-2 gap-3">
      <div className="col-span-2"><select className="w-full border border-amber-200 rounded px-3 py-2 text-sm" value={form.getValues('projectId')||''} onChange={(e)=>form.setValue('projectId', e.target.value)}><option value="">Select project</option>{projects.map(p=>(<option key={p.id} value={p.id}>{p.name}</option>))}</select></div>
      <div className="col-span-2"><select className="w-full border border-amber-200 rounded px-3 py-2 text-sm" value={form.getValues('type')||'apartment'} onChange={(e)=>form.setValue('type', e.target.value as any)}><option value="apartment">apartment</option><option value="villa">villa</option><option value="th">th</option><option value="twin">twin</option></select></div>
      <Input placeholder="Bedrooms" {...form.register('bedrooms')} /><Input placeholder="Bathrooms (optional)" {...form.register('bathrooms')} /><Input placeholder="Size (sqm)" {...form.register('sizeSqm')} /><Input placeholder="Price (EGP)" {...form.register('priceEgp')} /><Input placeholder="Price (USD)" {...form.register('priceUsd')} /><Input placeholder="Currency" {...form.register('currency')} />
      <div className="col-span-2"><select className="w-full border border-amber-200 rounded px-3 py-2 text-sm" value={form.getValues('availability')||'available'} onChange={(e)=>form.setValue('availability', e.target.value as any)}><option value="available">available</option><option value="reserved">reserved</option><option value="sold">sold</option></select></div>
      <div className="col-span-2"><Button type="submit">Add Unit</Button></div></form></CardContent></Card>
    <Card><CardHeader><CardTitle>All Units</CardTitle></CardHeader><CardContent><div className="divide-y">{items.map(u=>(<div key={u.id} className="py-3 grid grid-cols-6 items-center gap-2"><div className="font-medium">{u.type}</div><div className="text-sm">{u.bedrooms} BR</div><div className="text-sm">{u.sizeSqm} sqm</div><div className="text-sm">{u.priceEgp?.toLocaleString()||'â€”'} {u.currency||'EGP'}</div><div className="text-xs text-neutral-600">{u.availability}</div><div className="text-right"><Button variant="destructive" onClick={()=>remove(u.id)}>Delete</Button></div></div>))}</div></CardContent></Card>
  </div></AdminShell>); }
