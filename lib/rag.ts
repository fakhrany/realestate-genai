import { prisma } from '@/lib/db';
export type Parsed={ locale:'en'|'ar'; priceMax?:number; bedrooms?:number; deliveryYear?:number; city?:string; district?:string; textForEmbedding:string };
export type RagResult={ answer:{ title:string; text:string; sources:{ id:number; title:string }[] }; pins:{ id:string; lat:number; lng:number; title:string; price:string; meta:string }[] };
const AR_DIGITS='٠١٢٣٤٥٦٧٨٩'.split(''); const EN_DIGITS='0123456789'.split(''); function normalizeDigits(s:string){ return s.split('').map(ch=>{ const i=AR_DIGITS.indexOf(ch); return i>=0?EN_DIGITS[i]:ch; }).join(''); }
function toNumberLike(str?:string|null){ if(!str) return undefined; const t=normalizeDigits(str).replace(/[,\s]/g,''); const m=t.match(/([0-9]+(?:\.[0-9]+)?)(\s*)(k|K|ألف|الف|m|M|مليون)?/); if(!m) return Number(t); let n=parseFloat(m[1]); const unit=(m[3]||'').toLowerCase(); if(unit in {k:1,'ألف':1,'الف':1}) n*=1_000; if(unit in {m:1,'مليون':1}) n*=1_000_000; return n; }
export async function parseQuery(raw:string, locale:'en'|'ar'):Promise<Parsed>{ const q0=normalizeDigits(raw).toLowerCase(); const q=q0.normalize('NFKC'); let bedrooms: number | undefined; const bedReEn=/(\b|_)(?:bed|beds|bedroom|bedrooms)\s*(\d{1,2})/i; const bedReAr=/(\b|_)(?:غرف|غرفة|نوم)\s*(\d{1,2})/i; const mBed=q.match(locale==='ar'?bedReAr:bedReEn) || q.match(bedReEn) || q.match(bedReAr); if(mBed) bedrooms=parseInt(mBed[2]); let deliveryYear: number | undefined; const mYear=q.match(/20\d{2}/); if(mYear) deliveryYear=parseInt(mYear[0]); let priceMax:number|undefined; const pricePhrases=[/(under|below|<=|<|max|budget)\s*([0-9\.]+\s*(?:k|m)?)/i,/(اقل|أقل|تحت|حد أقصى|ميزانية)\s*([0-9\.]+\s*(?:k|m|مليون)?)/i,/\b([0-9\.]+\s*(?:k|m|مليون))\s*(?:egp|جنيه|جنيه مصري)?/i]; for(const re of pricePhrases){ const m=q.match(re); if(m){ priceMax=toNumberLike(m[2]||m[1]); break; } }
  const allProjects=await prisma.project.findMany({ select:{ city:true, district:true } }); const cities=Array.from(new Set(allProjects.map(p=>p.city.toLowerCase()))); const districts=Array.from(new Set(allProjects.map(p=>p.district.toLowerCase()))); let city:string|undefined; let district:string|undefined; for(const c of cities) if(q.includes(c)) city=c; for(const d of districts) if(q.includes(d)) district=d; return { locale, priceMax, bedrooms, deliveryYear, city, district, textForEmbedding:q }; }
async function embed(text:string):Promise<number[]>{ if(process.env.OPENAI_API_KEY){ const res=await fetch('https://api.openai.com/v1/embeddings',{ method:'POST', headers:{'Content-Type':'application/json', Authorization:`Bearer ${process.env.OPENAI_API_KEY}`}, body:JSON.stringify({ model:'text-embedding-3-small', input:text })}); if(!res.ok) throw new Error(`Embedding error ${res.status}`); const json:any=await res.json(); return json.data[0].embedding as number[]; } const vec=new Array(1536).fill(0); for(const [i,ch] of Array.from(text).entries()) vec[i%1536]+=ch.codePointAt(0)!%13; return vec; }
async function searchUnits(parsed:Parsed, limit=24){ const emb=await embed(parsed.textForEmbedding); const whereParts:string[]=[]; const params:any[]=[emb]; if(parsed.priceMax){ params.push(parsed.priceMax); whereParts.push('(u."priceEgp" IS NOT NULL AND u."priceEgp" <= $'+params.length+')'); } if(parsed.bedrooms){ params.push(parsed.bedrooms); whereParts.push('u."bedrooms" = $'+params.length); } if(parsed.deliveryYear){ params.push(parsed.deliveryYear); whereParts.push('p."deliveryDate" >= $'+params.length); } if(parsed.city){ params.push(parsed.city); whereParts.push('LOWER(p."city") = LOWER($'+params.length+')'); } if(parsed.district){ params.push(parsed.district); whereParts.push('LOWER(p."district") = LOWER($'+params.length+')'); } const whereSql=whereParts.length?`WHERE ${whereParts.join(' AND ')}`:''; const units=await prisma.$queryRawUnsafe<any[]>(`SELECT u.*, p."name" as project_name, p.lat, p.lng, 1 - (u.embedding <=> $1) as score FROM "Unit" u JOIN "Project" p ON p.id = u."projectId" ${whereSql} ORDER BY score DESC LIMIT ${limit}`, *params); return units; }
async function searchSources(parsed:Parsed, limit=5){ const emb=await embed(parsed.textForEmbedding); const docs=await prisma.$queryRawUnsafe<any[]>(`SELECT s.*, 1 - (s.embedding <=> $1) as score FROM "SourceDoc" s WHERE s.lang = $2 ORDER BY score DESC LIMIT ${limit}`, emb, parsed.locale); return docs; }
function fmtPrice(egp?:number|null, usd?:number|null, currency='EGP'){ if(egp) return `${egp.toLocaleString('en-US')} ${currency}`; if(usd) return `${usd.toLocaleString('en-US')} USD`; return '—'; }
export async function runRag({ query, locale }:{ query:string; locale:'en'|'ar' }):Promise<RagResult>{ const parsed=await parseQuery(query, locale); const [units, sources]=await Promise.all([searchUnits(parsed), searchSources(parsed)]); const pins=units.map(u=>({ id:String(u.id), lat:Number(u.lat), lng:Number(u.lng), title:`${u.project_name} — ${u.type}`, price: fmtPrice(u.priceEgp as any, u.priceUsd as any, (u.currency as any)||'EGP'), meta: `${u.bedrooms} BR • ${u.sizeSqm} sqm` })); const answer={ title: locale==='ar'?'أفضل النتائج حسب طلبك':'Top matches for your query', text: locale==='ar'?`تم تطبيق المرشحات${parsed.city?` للمدينة ${parsed.city}`:''}${parsed.bedrooms?`، عدد الغرف ${parsed.bedrooms}`:''}${parsed.priceMax?`، بحد أقصى ${parsed.priceMax.toLocaleString('en-US')} EGP`:''}${parsed.deliveryYear?`، تسليم بدءًا من ${parsed.deliveryYear}`:''}.`:`Applied filters${parsed.city?` for ${parsed.city}`:''}${parsed.bedrooms?`, bedrooms ${parsed.bedrooms}`:''}${parsed.priceMax?`, max ${parsed.priceMax.toLocaleString('en-US')} EGP`:''}${parsed.deliveryYear?`, delivering from ${parsed.deliveryYear}`:''}.`, sources: sources.map((s:any,i:number)=>({ id:i+1, title:s.title as string })) }; return { answer, pins }; }
